package Vistas;

import AccesoADatos.RecetaData;
import Entidades.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class BusquedaCombinada extends javax.swing.JPanel {

    Color violeta = new Color(153, 0, 153);
    Color naranja = new Color(255, 153, 0);
    

    private final DefaultTableModel modelo = new DefaultTableModel() {
        //Hacemos la tabla no-editable en todas sus celdas
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    public BusquedaCombinada() {

        initComponents();

        //Carga los colores de los radioButtons y Buscar
        jrbConGluten.setBackground(Color.white);
        jrbSinGluten.setBackground(Color.white);
        jrbConGluten.setForeground(violeta);
        jrbSinGluten.setForeground(violeta);
        jbBuscar.setBackground(violeta);
        jbBuscar.setForeground(Color.white);

        //Carga los comboBox
        cargarCategoriasAlComboBox();
        cargarIngredientesAlComboBox();
        cargarHorariosAlComboBox();
        cargarTiposDeCocinaAlComboBox();
        cargarFormasdeCoccionAlComboBox();   

        //Carga la estructura de la tabla
        armarTabla();

        //Carga el PopUp
        popUpTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpBackground = new javax.swing.JPanel();
        jpLienzoDeTrabajo = new javax.swing.JPanel();
        jlTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaCombinada = new javax.swing.JTable();
        jrbConGluten = new javax.swing.JRadioButton();
        jrbSinGluten = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jcbIngredientes = new javax.swing.JComboBox<>();
        jcbCategorias = new javax.swing.JComboBox<>();
        jcbHorarios = new javax.swing.JComboBox<>();
        jcbTipoDeCocina = new javax.swing.JComboBox<>();
        jbBuscar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jcbFormaDeCoccion = new javax.swing.JComboBox<>();
        jbCerrar = new javax.swing.JButton();
        jlFotoDeFondo = new javax.swing.JLabel();

        jpBackground.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpLienzoDeTrabajo.setBackground(new java.awt.Color(255, 255, 255));
        jpLienzoDeTrabajo.setForeground(new java.awt.Color(0, 0, 0));
        jpLienzoDeTrabajo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jlTitulo.setBackground(new java.awt.Color(153, 0, 153));
        jlTitulo.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        jlTitulo.setForeground(new java.awt.Color(153, 0, 153));
        jlTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlTitulo.setText("Búsqueda Combinada");
        jpLienzoDeTrabajo.add(jlTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, 670, -1));

        jtTablaCombinada.setBackground(new java.awt.Color(255, 255, 255));
        jtTablaCombinada.setForeground(new java.awt.Color(0, 0, 0));
        jtTablaCombinada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtTablaCombinada.setGridColor(new java.awt.Color(255, 255, 255));
        jtTablaCombinada.setSelectionBackground(new java.awt.Color(255, 153, 255));
        jtTablaCombinada.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(jtTablaCombinada);

        jpLienzoDeTrabajo.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 790, 110));

        jrbConGluten.setText("Con Gluten");
        jrbConGluten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbConGlutenActionPerformed(evt);
            }
        });
        jpLienzoDeTrabajo.add(jrbConGluten, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 70, 100, -1));

        jrbSinGluten.setText("Sin Gluten");
        jrbSinGluten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbSinGlutenActionPerformed(evt);
            }
        });
        jpLienzoDeTrabajo.add(jrbSinGluten, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 120, 100, -1));

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 153));
        jLabel2.setText("Categoría:");
        jpLienzoDeTrabajo.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 80, -1));

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 153));
        jLabel3.setText("Cocción:");
        jpLienzoDeTrabajo.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 60, -1));

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 153));
        jLabel4.setText("Horario:");
        jpLienzoDeTrabajo.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 50, -1));

        jLabel5.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 153));
        jLabel5.setText("Tipo de Cocina:");
        jpLienzoDeTrabajo.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, 90, -1));

        jcbIngredientes.setBackground(new java.awt.Color(255, 255, 255));
        jcbIngredientes.setForeground(new java.awt.Color(153, 0, 153));
        jpLienzoDeTrabajo.add(jcbIngredientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 190, -1));

        jcbCategorias.setBackground(new java.awt.Color(255, 255, 255));
        jcbCategorias.setForeground(new java.awt.Color(153, 0, 153));
        jpLienzoDeTrabajo.add(jcbCategorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 190, -1));

        jcbHorarios.setBackground(new java.awt.Color(255, 255, 255));
        jcbHorarios.setForeground(new java.awt.Color(153, 0, 153));
        jpLienzoDeTrabajo.add(jcbHorarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 70, 190, -1));

        jcbTipoDeCocina.setBackground(new java.awt.Color(255, 255, 255));
        jcbTipoDeCocina.setForeground(new java.awt.Color(153, 0, 153));
        jpLienzoDeTrabajo.add(jcbTipoDeCocina, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 120, 190, -1));

        jbBuscar.setText("Buscar");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });
        jpLienzoDeTrabajo.add(jbBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, 150, -1));

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 153));
        jLabel6.setText("Ingrediente:");
        jpLienzoDeTrabajo.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 80, -1));

        jcbFormaDeCoccion.setBackground(new java.awt.Color(255, 255, 255));
        jcbFormaDeCoccion.setForeground(new java.awt.Color(153, 0, 153));
        jpLienzoDeTrabajo.add(jcbFormaDeCoccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 190, -1));

        jbCerrar.setBackground(new java.awt.Color(153, 0, 153));
        jbCerrar.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jbCerrar.setForeground(new java.awt.Color(255, 255, 255));
        jbCerrar.setText("X");
        jbCerrar.setPreferredSize(new java.awt.Dimension(90, 32));
        jbCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jbCerrarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jbCerrarMouseExited(evt);
            }
        });
        jbCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCerrarActionPerformed(evt);
            }
        });
        jpLienzoDeTrabajo.add(jbCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, 40, -1));

        jpBackground.add(jpLienzoDeTrabajo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 810, 340));

        jlFotoDeFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Foto de base 980x654.png"))); // NOI18N
        jpBackground.add(jlFotoDeFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        //Instanciamos recetaData para usar luego
        RecetaData recetaD = new RecetaData();

        //Definimos las condiciones de las recetas a buscar
        //Categoría
        String categoriaABuscar = null;
        if (jcbCategorias.getSelectedItem().equals("Selecciona la categoría:")){
            JOptionPane.showMessageDialog(this,"Seleccione la categoría a buscar.");
        } else {
            categoriaABuscar = (String) jcbCategorias.getSelectedItem();
        }
        //Ingrediente Principal
        String ingredienteABuscar = null;
        if (jcbIngredientes.getSelectedItem().equals("Selecciona el Ingrediente:")){
            JOptionPane.showMessageDialog(this,"Seleccione el ingrediente a buscar.");
        } else {
            ingredienteABuscar = (String) jcbIngredientes.getSelectedItem();
        }
        //Tipo de comida - Horario
        String horarioABuscar = null;
        if (jcbHorarios.getSelectedItem().equals("Selecciona el horario:")){
            JOptionPane.showMessageDialog(this, "Seleccione el horario a buscar.");
        } else {
            horarioABuscar = (String) jcbHorarios.getSelectedItem();
        }
        //Tipo de cocina
        String tipoDeCocinaABuscar = null;
        if (jcbTipoDeCocina.getSelectedItem().equals("Selecciona el tipo de cocina:")){
            JOptionPane.showMessageDialog(this,"Seleccione el tipo de cocina a buscar.");
        } else {
            tipoDeCocinaABuscar = (String) jcbTipoDeCocina.getSelectedItem();
        }
        //Forma de cocción
        String formaDeCoccionABuscar = null;
        if (jcbFormaDeCoccion.getSelectedItem().equals("Selecciona la forma de cocción:")){
            JOptionPane.showMessageDialog(this,"Seleccione la forma de cocción a buscar.");
        } else {
            formaDeCoccionABuscar = (String) jcbFormaDeCoccion.getSelectedItem();
        }   
        
        //Definimos la variable asociada al los botones
        boolean sinGlutenABuscar = false;
        if (jrbConGluten.isSelected()){
            sinGlutenABuscar = false;
        } else if (jrbSinGluten.isSelected()){
            sinGlutenABuscar = true;
        } else {
            JOptionPane.showMessageDialog(this,"Indique si la receta es con o sin gluten");
        }
        
        //Borramos las filas evitando repeticiones
        borrarFilas();

        //Listamos las recetas en la tabla
        for (Receta aux : recetaD.listarReceta()) {
            //Para que no aparezca false o true por pantalla
                String esSinGluten = null;
                if (aux.isSinTACC() == false) {
                    esSinGluten = "No";
                } else {
                    esSinGluten = "Si";
                }
                
            //si la receta cumple todas las condiciones seleccionadas
            if (aux.getCategoria().equals(categoriaABuscar) &&
                aux.getIngredientePrincipal().equals(ingredienteABuscar) &&
                aux.getTipoDeComida().equals(horarioABuscar) &&
                aux.getTipoDeCocina().equals(tipoDeCocinaABuscar) &&
                aux.getFormaDeCoccion().equals(formaDeCoccionABuscar) &&
                aux.isSinTACC() == sinGlutenABuscar) {
                modelo.addRow(new Object[]{aux.getTitulo(), aux.getCategoria(), aux.getIngredientePrincipal(), aux.getTipoDeComida(), aux.getTipoDeCocina(), aux.getFormaDeCoccion(), esSinGluten});
            }
                
        }
                
        if (jtTablaCombinada.getRowCount() == 0){
            JOptionPane.showMessageDialog(this,"No existe receta con esa combinación");
        }
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jrbConGlutenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbConGlutenActionPerformed
        //Si está seleccionado el botón inhabilitamos el otro
        if (jrbConGluten.isSelected()) {
            jrbSinGluten.setSelected(false);
        }
    }//GEN-LAST:event_jrbConGlutenActionPerformed

    private void jrbSinGlutenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbSinGlutenActionPerformed
                //Si está seleccionado el botón inhabilitamos el otro
        if (jrbSinGluten.isSelected()) {
            jrbConGluten.setSelected(false);
        }
    
    }//GEN-LAST:event_jrbSinGlutenActionPerformed

    private void jbCerrarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbCerrarMouseEntered
        jbCerrar.setBackground(naranja);
        jbCerrar.setForeground(Color.white);
    }//GEN-LAST:event_jbCerrarMouseEntered

    private void jbCerrarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbCerrarMouseExited
        jbCerrar.setBackground(violeta);
        jbCerrar.setForeground(Color.white);

    }//GEN-LAST:event_jbCerrarMouseExited

    private void jbCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCerrarActionPerformed
        MenuPrincipal.volverALaFotoDeFondo();
    }//GEN-LAST:event_jbCerrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCerrar;
    private javax.swing.JComboBox<String> jcbCategorias;
    private javax.swing.JComboBox<String> jcbFormaDeCoccion;
    private javax.swing.JComboBox<String> jcbHorarios;
    private javax.swing.JComboBox<String> jcbIngredientes;
    private javax.swing.JComboBox<String> jcbTipoDeCocina;
    private javax.swing.JLabel jlFotoDeFondo;
    private javax.swing.JLabel jlTitulo;
    private javax.swing.JPanel jpBackground;
    private javax.swing.JPanel jpLienzoDeTrabajo;
    private javax.swing.JRadioButton jrbConGluten;
    private javax.swing.JRadioButton jrbSinGluten;
    private javax.swing.JTable jtTablaCombinada;
    // End of variables declaration//GEN-END:variables

    private void armarTabla() {
        //Agregamos las cabeceras a la tabla
        modelo.addColumn("Título");
        modelo.addColumn("Categoría");
        modelo.addColumn("Ingrediente Ppal.");
        modelo.addColumn("Horario");
        modelo.addColumn("Tipo de Cocina");
        modelo.addColumn("Forma de cocción");
        modelo.addColumn("Sin Gluten");

        //Seteamos el modelo a la tabla
        jtTablaCombinada.setModel(modelo);

        //Impedimos el reordenamiento de la cabecera
        jtTablaCombinada.getTableHeader().setReorderingAllowed(false);

//       Para hacer uso de la clase MyRenderer solo es necesario escribir este código en el lugar donde esta el jTable:
        jtTablaCombinada.getColumnModel().getColumn(0).setHeaderRenderer(new MyRenderer(violeta, Color.white));
        jtTablaCombinada.getColumnModel().getColumn(1).setHeaderRenderer(new MyRenderer(violeta, Color.white));
        jtTablaCombinada.getColumnModel().getColumn(2).setHeaderRenderer(new MyRenderer(violeta, Color.white));
        jtTablaCombinada.getColumnModel().getColumn(3).setHeaderRenderer(new MyRenderer(violeta, Color.white));
        jtTablaCombinada.getColumnModel().getColumn(4).setHeaderRenderer(new MyRenderer(violeta, Color.white));
        jtTablaCombinada.getColumnModel().getColumn(5).setHeaderRenderer(new MyRenderer(violeta, Color.white));
        jtTablaCombinada.getColumnModel().getColumn(6).setHeaderRenderer(new MyRenderer(violeta, Color.white));
//La clase MyRenderer tiene definido un constructor que recibe 2 parámetros Color, los cuales corresponden a los colores de fondo y de fuente.
        

        DefaultTableCellRenderer tcr0 = new DefaultTableCellRenderer();

        //para centrar los datos de la segunda columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaCombinada.getColumnModel().getColumn(1).setCellRenderer(tcr0);

        //para centrar los datos de la tercera columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaCombinada.getColumnModel().getColumn(2).setCellRenderer(tcr0);

        //Para centrar los datos de la cuarta columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaCombinada.getColumnModel().getColumn(3).setCellRenderer(tcr0);

        //Para centrar los datos de la quinta columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaCombinada.getColumnModel().getColumn(4).setCellRenderer(tcr0);
        
        //Para centrar los datos de la sexta columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaCombinada.getColumnModel().getColumn(5).setCellRenderer(tcr0);

        //Para centrar los datos de la séptima columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaCombinada.getColumnModel().getColumn(6).setCellRenderer(tcr0);

        //Para establecer los anchos de columna
        jtTablaCombinada.getColumnModel().getColumn(0).setPreferredWidth(130);
        jtTablaCombinada.getColumnModel().getColumn(1).setPreferredWidth(30);
        jtTablaCombinada.getColumnModel().getColumn(2).setPreferredWidth(30);
        jtTablaCombinada.getColumnModel().getColumn(3).setPreferredWidth(20);
        jtTablaCombinada.getColumnModel().getColumn(4).setPreferredWidth(20);
        jtTablaCombinada.getColumnModel().getColumn(5).setPreferredWidth(25);
        jtTablaCombinada.getColumnModel().getColumn(6).setPreferredWidth(8);

        //Para hacer blanco el fondo de la tabla
        jtTablaCombinada.setOpaque(true);
        jtTablaCombinada.setBackground(Color.white);

    }

    private void borrarFilas() {
        //Evita la repetición de las filas en la tabla
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }
    }

    //para agregar la ventana pop-up a la tabla
    public void popUpTable() {
        //crea la carcaza vacía, el marco
        JPopupMenu popUpMenu = new JPopupMenu();
        //crea la línea de menú
        JMenuItem menuItem1 = new JMenuItem("Visualizar la receta", new ImageIcon(getClass().getResource("/Imagenes/lupa.png")));

        menuItem1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                JOptionPane.showMessageDialog(null, "Esperando un pdf", "Receta", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        //agrega la línea de menú al marco
        popUpMenu.add(menuItem1);
        //agrega el marco con la línea a la tabla
        jtTablaCombinada.setComponentPopupMenu(popUpMenu);
    }

    private void cargarCategoriasAlComboBox() {

        jcbCategorias.addItem("Selecciona la categoría:");
        jcbCategorias.addItem(Categoria.AGRIDULCE.toString());
        jcbCategorias.addItem(Categoria.ARROCES_GUISOS_SALTEADOS_RELLENOS.toString());
        jcbCategorias.addItem(Categoria.BURGERS_SEITAN_MILANESAS.toString());
        jcbCategorias.addItem(Categoria.DULCES_TRUFAS.toString());
        jcbCategorias.addItem(Categoria.ENSALADAS.toString());
        jcbCategorias.addItem(Categoria.LICORES.toString());
        jcbCategorias.addItem(Categoria.PANES.toString());
        jcbCategorias.addItem(Categoria.PARRILLADA_EMPANADAS_BROCHETTES.toString());
        jcbCategorias.addItem(Categoria.PROBIOTICOS_ESCABECHES.toString());
        jcbCategorias.addItem(Categoria.QUESOS_PATES.toString());
        jcbCategorias.addItem(Categoria.SALSAS.toString());
        jcbCategorias.addItem(Categoria.SMOOTHIES_LECHES.toString());
        jcbCategorias.addItem(Categoria.SNACKS_FINGERFOOD.toString());
        jcbCategorias.addItem(Categoria.TARTAS_TORTILLAS.toString());
        jcbCategorias.addItem(Categoria.TOFU.toString());
        jcbCategorias.addItem(Categoria.TORTAS_MUFFINS.toString());

    }

    private void cargarIngredientesAlComboBox() {

        jcbIngredientes.addItem("Selecciona el Ingrediente:");
        jcbIngredientes.addItem(Ingredientes.ACEITUNAS.toString());
        jcbIngredientes.addItem(Ingredientes.AJO.toString());
        jcbIngredientes.addItem(Ingredientes.AKUSAI.toString());
        jcbIngredientes.addItem(Ingredientes.ALBAHACA.toString());
        jcbIngredientes.addItem(Ingredientes.ANANÁ.toString());
        jcbIngredientes.addItem(Ingredientes.ANÍS.toString());
        jcbIngredientes.addItem(Ingredientes.AQUAFABA.toString());
        jcbIngredientes.addItem(Ingredientes.ARROZ.toString());
        jcbIngredientes.addItem(Ingredientes.AVENA.toString());
        jcbIngredientes.addItem(Ingredientes.AZÚCAR.toString());
        jcbIngredientes.addItem(Ingredientes.AZÚCAR_IMPALPABLE.toString());
        jcbIngredientes.addItem(Ingredientes.BANANAS.toString());
        jcbIngredientes.addItem(Ingredientes.BATATAS.toString());
        jcbIngredientes.addItem(Ingredientes.BERENJENAS.toString());
        jcbIngredientes.addItem(Ingredientes.BOLDO.toString());
        jcbIngredientes.addItem(Ingredientes.BRÓCOLI.toString());
        jcbIngredientes.addItem(Ingredientes.CACAO_CHOCOLATE.toString());
        jcbIngredientes.addItem(Ingredientes.CAFÉ.toString());
        jcbIngredientes.addItem(Ingredientes.CALABAZA.toString());
        jcbIngredientes.addItem(Ingredientes.CEBOLLAS.toString());
        jcbIngredientes.addItem(Ingredientes.CHÍA.toString());
        jcbIngredientes.addItem(Ingredientes.CHOCLO.toString());
        jcbIngredientes.addItem(Ingredientes.COCO.toString());
        jcbIngredientes.addItem(Ingredientes.COLIFLOR.toString());
        jcbIngredientes.addItem(Ingredientes.COUS_COUS.toString());
        jcbIngredientes.addItem(Ingredientes.DÁTILES.toString());
        jcbIngredientes.addItem(Ingredientes.DURAZNOS.toString());
        jcbIngredientes.addItem(Ingredientes.ESPINACAS.toString());
        jcbIngredientes.addItem(Ingredientes.FRUTILLAS.toString());
        jcbIngredientes.addItem(Ingredientes.FRUTOS_SECOS.toString());
        jcbIngredientes.addItem(Ingredientes.GARBANZOS.toString());
        jcbIngredientes.addItem(Ingredientes.GIRASOL.toString());
        jcbIngredientes.addItem(Ingredientes.GLUTEN_PURO.toString());
        jcbIngredientes.addItem(Ingredientes.HARINA_COMÚN.toString());
        jcbIngredientes.addItem(Ingredientes.HIGOS.toString());
        jcbIngredientes.addItem(Ingredientes.HONGOS.toString());
        jcbIngredientes.addItem(Ingredientes.JENGIBRE.toString());
        jcbIngredientes.addItem(Ingredientes.KALE.toString());
        jcbIngredientes.addItem(Ingredientes.KETCHUP.toString());
        jcbIngredientes.addItem(Ingredientes.LECHE_VEGETAL.toString());
        jcbIngredientes.addItem(Ingredientes.LENTEJAS.toString());
        jcbIngredientes.addItem(Ingredientes.LIMÓN.toString());
        jcbIngredientes.addItem(Ingredientes.LINO.toString());
        jcbIngredientes.addItem(Ingredientes.MAICENA.toString());
        jcbIngredientes.addItem(Ingredientes.MAÍZ.toString());
        jcbIngredientes.addItem(Ingredientes.MANDARINAS.toString());
        jcbIngredientes.addItem(Ingredientes.MANDIOCA.toString());
        jcbIngredientes.addItem(Ingredientes.MANZANAS.toString());
        jcbIngredientes.addItem(Ingredientes.MAYONESA.toString());
        jcbIngredientes.addItem(Ingredientes.MIJO.toString());
        jcbIngredientes.addItem(Ingredientes.MOSTAZA.toString());
        jcbIngredientes.addItem(Ingredientes.NARANJAS.toString());
        jcbIngredientes.addItem(Ingredientes.PALTA.toString());
        jcbIngredientes.addItem(Ingredientes.PAPAS.toString());
        jcbIngredientes.addItem(Ingredientes.PEPINO.toString());
        jcbIngredientes.addItem(Ingredientes.PERAS.toString());
        jcbIngredientes.addItem(Ingredientes.PIMIENTOS.toString());
        jcbIngredientes.addItem(Ingredientes.POLENTA.toString());
        jcbIngredientes.addItem(Ingredientes.POROTOS.toString());
        jcbIngredientes.addItem(Ingredientes.PUERROS.toString());
        jcbIngredientes.addItem(Ingredientes.QUINOA.toString());
        jcbIngredientes.addItem(Ingredientes.REMOLACHA.toString());
        jcbIngredientes.addItem(Ingredientes.REPOLLOS.toString());
        jcbIngredientes.addItem(Ingredientes.ROMERO.toString());
        jcbIngredientes.addItem(Ingredientes.SALSA_DE_SOJA.toString());
        jcbIngredientes.addItem(Ingredientes.SALVIA.toString());
        jcbIngredientes.addItem(Ingredientes.SOJA_TEXTURIZADA.toString());
        jcbIngredientes.addItem(Ingredientes.TÉS.toString());
        jcbIngredientes.addItem(Ingredientes.TOFU.toString());
        jcbIngredientes.addItem(Ingredientes.TOMATES.toString());
        jcbIngredientes.addItem(Ingredientes.VAINILLA.toString());
        jcbIngredientes.addItem(Ingredientes.YERBA.toString());
        jcbIngredientes.addItem(Ingredientes.ZANAHORIAS.toString());
        jcbIngredientes.addItem(Ingredientes.ZUQUINI.toString());

    }

    private void cargarHorariosAlComboBox() {

        jcbHorarios.addItem("Selecciona el horario:");
        jcbHorarios.addItem(TipoDeComida_Horario.ADEREZO.toString());
        jcbHorarios.addItem(TipoDeComida_Horario.DESAYUNO_MERIENDA.toString());
        jcbHorarios.addItem(TipoDeComida_Horario.ENTRADA.toString());
        jcbHorarios.addItem(TipoDeComida_Horario.HORA_DEL_CAFE_O_MATE.toString());
        jcbHorarios.addItem(TipoDeComida_Horario.PLATO_PRINCIPAL.toString());
        jcbHorarios.addItem(TipoDeComida_Horario.POSTRE.toString());

    }

    private void cargarTiposDeCocinaAlComboBox() {

        jcbTipoDeCocina.addItem("Selecciona el tipo de cocina:");
        jcbTipoDeCocina.addItem(TipoDeCocina.AMERICANA.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.ARABE.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.CRIOLLA.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.ESPAÑOLA.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.EUROPEA.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.FESTIVA.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.HINDU.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.ITALIANA.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.ORIENTAL.toString());
        jcbTipoDeCocina.addItem(TipoDeCocina.UNIVERSAL.toString());

    }

    private void cargarFormasdeCoccionAlComboBox() {

        jcbFormaDeCoccion.addItem("Selecciona la forma de cocción:");
        jcbFormaDeCoccion.addItem(FormaDeCoccion.A_LA_OLLA.toString());
        jcbFormaDeCoccion.addItem(FormaDeCoccion.A_LA_SARTEN.toString());
        jcbFormaDeCoccion.addItem(FormaDeCoccion.AL_HORNO.toString());
        jcbFormaDeCoccion.addItem(FormaDeCoccion.AL_VAPOR.toString());
        jcbFormaDeCoccion.addItem(FormaDeCoccion.SIN_COCCION.toString());
        
    }
}
